// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	// "github.com/k0kubun/pp"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PceServiceClient is the client API for PceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PceServiceClient interface {
	CreateSRPolicy(ctx context.Context, in *CreateSRPolicyInput, opts ...grpc.CallOption) (*RequestStatus, error)
	CreateSRPolicyWithoutLinkState(ctx context.Context, in *CreateSRPolicyInput, opts ...grpc.CallOption) (*RequestStatus, error)
	GetSessionList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SessionList, error)
	GetSRPolicyList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SRPolicyList, error)
	GetTed(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Ted, error)
	DeleteSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*RequestStatus, error)
}

type pceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPceServiceClient(cc grpc.ClientConnInterface) PceServiceClient {
	return &pceServiceClient{cc}
}

func (c *pceServiceClient) CreateSRPolicy(ctx context.Context, in *CreateSRPolicyInput, opts ...grpc.CallOption) (*RequestStatus, error) {
	out := new(RequestStatus)
	err := c.cc.Invoke(ctx, "/pb.PceService/CreateSRPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pceServiceClient) CreateSRPolicyWithoutLinkState(ctx context.Context, in *CreateSRPolicyInput, opts ...grpc.CallOption) (*RequestStatus, error) {
	out := new(RequestStatus)
	err := c.cc.Invoke(ctx, "/pb.PceService/CreateSRPolicyWithoutLinkState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pceServiceClient) GetSessionList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SessionList, error) {
	out := new(SessionList)
	err := c.cc.Invoke(ctx, "/pb.PceService/GetSessionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pceServiceClient) GetSRPolicyList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SRPolicyList, error) {
	out := new(SRPolicyList)
	err := c.cc.Invoke(ctx, "/pb.PceService/GetSRPolicyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pceServiceClient) GetTed(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Ted, error) {
	out := new(Ted)
	err := c.cc.Invoke(ctx, "/pb.PceService/GetTed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pceServiceClient) DeleteSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*RequestStatus, error) {
	out := new(RequestStatus)
	err := c.cc.Invoke(ctx, "/pb.PceService/DeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PceServiceServer is the server API for PceService service.
// All implementations must embed UnimplementedPceServiceServer
// for forward compatibility
type PceServiceServer interface {
	CreateSRPolicy(context.Context, *CreateSRPolicyInput) (*RequestStatus, error)
	CreateSRPolicyWithoutLinkState(context.Context, *CreateSRPolicyInput) (*RequestStatus, error)
	GetSessionList(context.Context, *emptypb.Empty) (*SessionList, error)
	GetSRPolicyList(context.Context, *emptypb.Empty) (*SRPolicyList, error)
	GetTed(context.Context, *emptypb.Empty) (*Ted, error)
	DeleteSession(context.Context, *Session) (*RequestStatus, error)
	mustEmbedUnimplementedPceServiceServer()
}

// UnimplementedPceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPceServiceServer struct {
}

func (UnimplementedPceServiceServer) CreateSRPolicy(context.Context, *CreateSRPolicyInput) (*RequestStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSRPolicy not implemented")
}
func (UnimplementedPceServiceServer) CreateSRPolicyWithoutLinkState(context.Context, *CreateSRPolicyInput) (*RequestStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSRPolicyWithoutLinkState not implemented")
}
func (UnimplementedPceServiceServer) GetSessionList(context.Context, *emptypb.Empty) (*SessionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionList not implemented")
}
func (UnimplementedPceServiceServer) GetSRPolicyList(context.Context, *emptypb.Empty) (*SRPolicyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSRPolicyList not implemented")
}
func (UnimplementedPceServiceServer) GetTed(context.Context, *emptypb.Empty) (*Ted, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTed not implemented")
}
func (UnimplementedPceServiceServer) DeleteSession(context.Context, *Session) (*RequestStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedPceServiceServer) mustEmbedUnimplementedPceServiceServer() {}

// UnsafePceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PceServiceServer will
// result in compilation errors.
type UnsafePceServiceServer interface {
	mustEmbedUnimplementedPceServiceServer()
}

func RegisterPceServiceServer(s grpc.ServiceRegistrar, srv PceServiceServer) {
	s.RegisterService(&PceService_ServiceDesc, srv)
}

func _PceService_CreateSRPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSRPolicyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PceServiceServer).CreateSRPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PceService/CreateSRPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PceServiceServer).CreateSRPolicy(ctx, req.(*CreateSRPolicyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PceService_CreateSRPolicyWithoutLinkState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSRPolicyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PceServiceServer).CreateSRPolicyWithoutLinkState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PceService/CreateSRPolicyWithoutLinkState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PceServiceServer).CreateSRPolicyWithoutLinkState(ctx, req.(*CreateSRPolicyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PceService_GetSessionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PceServiceServer).GetSessionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PceService/GetSessionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PceServiceServer).GetSessionList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PceService_GetSRPolicyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PceServiceServer).GetSRPolicyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PceService/GetSRPolicyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PceServiceServer).GetSRPolicyList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PceService_GetTed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PceServiceServer).GetTed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PceService/GetTed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PceServiceServer).GetTed(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PceService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PceServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PceService/DeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PceServiceServer).DeleteSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

// PceService_ServiceDesc is the grpc.ServiceDesc for PceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PceService",
	HandlerType: (*PceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSRPolicy",
			Handler:    _PceService_CreateSRPolicy_Handler,
		},
		{
			MethodName: "CreateSRPolicyWithoutLinkState",
			Handler:    _PceService_CreateSRPolicyWithoutLinkState_Handler,
		},
		{
			MethodName: "GetSessionList",
			Handler:    _PceService_GetSessionList_Handler,
		},
		{
			MethodName: "GetSRPolicyList",
			Handler:    _PceService_GetSRPolicyList_Handler,
		},
		{
			MethodName: "GetTed",
			Handler:    _PceService_GetTed_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _PceService_DeleteSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pola.proto",
}
